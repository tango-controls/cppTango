include(FindPkgConfig)

if(NOT CMAKE_BUILD_TYPE)
    message("No build type specified - default is Release")
    set(CMAKE_BUILD_TYPE Release)
endif()

if(CPPZMQ_BASE)
    message("Using CPPZMQ_BASE=${CPPZMQ_BASE}")
    include_directories(${CPPZMQ_BASE}/include)
endif(CPPZMQ_BASE)

if(IDL_BASE)
    message("Using IDL_BASEIDL_BASE=${IDL_BASE}")
    set(IDL_PKG_INCLUDE_DIRS ${IDL_BASE}/include)
else(IDL_BASE)
    pkg_search_module(IDL_PKG REQUIRED tangoidl)
endif(IDL_BASE)

if(OMNI_BASE)
    message("Using OMNI_BASE=${OMNI_BASE}")
    set(OMNIORB_PKG_INCLUDE_DIRS ${OMNI_BASE}/include)
    if(WIN32)
        set(OMNIIDL_PATH ${OMNI_BASE}/bin/x86_win32/)
        link_directories(${OMNI_BASE}/lib/x86_win32/)
        include_directories($ENV{OMNI_BASE}/include)
        if (CMAKE_BUILD_TYPE STREQUAL "Debug")
            set(OMNIORB_PKG_LIBRARIES_DYN "omniORB4_rtd.lib;omniDynamic4_rtd.lib;omnithread_rtd.lib;COS4_rtd.lib;msvcstubd.lib")
            set(OMNIORB_PKG_LIBRARIES_STA "omniORB4d.lib;omniDynamic4d.lib;omnithreadd.lib;COS4d.lib;msvcstubd.lib")
        else()
            set(OMNIORB_PKG_LIBRARIES_DYN "omniORB4_rt.lib;omniDynamic4_rt.lib;omnithread_rt.lib;COS4_rt.lib;msvcstub.lib")
            set(OMNIORB_PKG_LIBRARIES_STA "omniORB4.lib;omniDynamic4.lib;omnithread.lib;COS4.lib;msvcstub.lib")
        endif()
    else(WIN32)
        set(OMNIIDL_PATH ${OMNI_BASE}/bin/)
        include_directories(${OMNI_BASE}/include)
        link_directories(${OMNI_BASE}/lib)
        set(OMNIORB_PKG_LIBRARIES "-lomniORB4 -lomnithread -lCOS4 -lomniDynamic4")
    endif(WIN32)
else(OMNI_BASE)
    #CORBA
    pkg_search_module(OMNIORB_PKG REQUIRED omniORB4)
    #COS
    pkg_search_module(OMNICOS_PKG REQUIRED omniCOS4)
    #dynamic CORBA
    pkg_search_module(OMNIDYN_PKG REQUIRED omniDynamic4)
    if(NOT OMNIORB_PKG_FOUND)
        message(FATAL_ERROR "omniORB4 library is required for Tango")
    endif()
endif(OMNI_BASE)

if(ZMQ_BASE)
    message("Using ZMQ_BASE=${ZMQ_BASE}")
    set(ZMQ_PKG_INCLUDE_DIRS ${ZMQ_BASE}/include)
    if (WIN32)
        link_directories(${ZMQ_BASE}/lib/Debug)
        link_directories(${ZMQ_BASE}/lib/Release)
        link_directories(${ZMQ_BASE}/bin/Debug)
        link_directories(${ZMQ_BASE}/bin/Release)
        if (MSVC90)
            if (CMAKE_BUILD_TYPE STREQUAL "Debug")
                set(ZMQ_PKG_LIBRARIES_STA "libzmq-v90-mt-sgd-4_0_5.lib")
                set(ZMQ_PKG_LIBRARIES_DYN "libzmq-v90-mt-gd-4_0_5.lib")
            else()
                set(ZMQ_PKG_LIBRARIES_STA "libzmq-v90-mt-s-4_0_5.lib")
                set(ZMQ_PKG_LIBRARIES_DYN "libzmq-v90-mt-4_0_5.lib")
            endif()
        endif()
        if (MSVC10)
            if (CMAKE_BUILD_TYPE STREQUAL "Debug")
                set(ZMQ_PKG_LIBRARIES_STA "libzmq-v100-mt-sgd-4_0_5.lib")
                set(ZMQ_PKG_LIBRARIES_DYN "libzmq-v100-mt-gd-4_0_5.lib")
            else()
                set(ZMQ_PKG_LIBRARIES_STA "libzmq-v100-mt-s-4_0_5.lib")
                set(ZMQ_PKG_LIBRARIES_DYN "libzmq-v100-mt-4_0_5.lib")
            endif()
        endif()
        if (MSVC12)
            if (CMAKE_BUILD_TYPE STREQUAL "Debug")
                set(ZMQ_PKG_LIBRARIES_STA "libzmq-v120-mt-sgd-4_0_5.lib")
                set(ZMQ_PKG_LIBRARIES_DYN "libzmq-v120-mt-gd-4_0_5.lib")
            else()
                set(ZMQ_PKG_LIBRARIES_STA "libzmq-v120-mt-s-4_0_5.lib")
                set(ZMQ_PKG_LIBRARIES_DYN "libzmq-v120-mt-4_0_5.lib")
            endif()
        endif()
        if (MSVC14)
            if (CMAKE_BUILD_TYPE STREQUAL "Debug")
                set(ZMQ_PKG_LIBRARIES_STA "libzmq-v140-mt-sgd-4_0_5.lib")
                set(ZMQ_PKG_LIBRARIES_DYN "libzmq-v140-mt-gd-4_0_5.lib")
            else()
                set(ZMQ_PKG_LIBRARIES_STA "libzmq-v140-mt-s-4_0_5.lib")
                set(ZMQ_PKG_LIBRARIES_DYN "libzmq-v140-mt-4_0_5.lib")
            endif()
        endif()
    else()
        set(ZMQ_PKG_LIBRARIES "-lzmq")
        link_directories(${ZMQ_BASE}/lib)
    endif()
    include_directories(${ZMQ_BASE}/include)
else(ZMQ_BASE)
    pkg_search_module(ZMQ_PKG REQUIRED libzmq)
    if(NOT ZMQ_PKG_FOUND)
        message(FATAL_ERROR "ZMQ library is required for Tango")
    endif()
endif(ZMQ_BASE)

if(PTHREAD_WIN)
    message("Using PTHREAD_WIN=${PTHREAD_WIN}")
    add_definitions(-DHAVE_PTHREAD_NP_H)
    set(PTHREAD_WIN_PKG_INCLUDE_DIRS ${PTHREAD_WIN}/include)
    
    if (CMAKE_BUILD_TYPE STREQUAL "Debug")
        set(PTHREAD_WIN_PKG_LIBRARIES_DYN "pthreadVC2d.lib")
        set(PTHREAD_WIN_PKG_LIBRARIES_STA "pthreadVC2-sd.lib")
    else()
        set(PTHREAD_WIN_PKG_LIBRARIES_DYN "pthreadVC2.lib")
        set(PTHREAD_WIN_PKG_LIBRARIES_STA "pthreadVC2-s.lib")
    endif()
endif(PTHREAD_WIN)

#####  Ensure zmq.hpp file is present #####
include(CheckIncludeFileCXX)
# set CMAKE_REQUIRED_INCLUDES to take the currently defined include directories into account when looking for zmq.hpp
get_property(CMAKE_REQUIRED_INCLUDES DIRECTORY PROPERTY INCLUDE_DIRECTORIES)
# Clear HAVE_ZMQ_HPP variable from the cache to force the check every time
# Thanks to this, the user do not have to clear the CMake cache himself when using different -DCPPZMQ_BASE options
unset(HAVE_ZMQ_HPP CACHE)
CHECK_INCLUDE_FILE_CXX(zmq.hpp HAVE_ZMQ_HPP)
if(NOT HAVE_ZMQ_HPP)
    message(FATAL_ERROR "zmq.hpp include file not found. \n
Please install cppzmq (https://github.com/zeromq/cppzmq) on your system and/or use \
-DCPPZMQ_BASE=<cppzmq home folder> option to specify where zmq.hpp file is installed \
(CMake will look for it under <CPPZMQ_BASE>/include, <ZMQ_BASE>/include, \
<OMNI_BASE>/include and system include directories).")
endif()

message("Verifying ${OMNIIDL_PATH}omniidl")
if(WIN32)
    execute_process(COMMAND ${OMNIIDL_PATH}omniidl.exe -V RESULT_VARIABLE FAILED)
else()
    execute_process(COMMAND ${OMNIIDL_PATH}omniidl -V RESULT_VARIABLE FAILED)
endif()

if(${FAILED})
    message(SEND_ERROR " No omniidl was found! rv=${FAILED}")
endif()

#assuming build platform == target
set(PLATFORM 32)
if(WIN32)
    if(CMAKE_CL_64)
        set(PLATFORM 64)
    endif(CMAKE_CL_64)
else(WIN32)
    if(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
        set(PLATFORM 64)
    endif()
endif(WIN32)

if(NOT WIN32)
    include(CheckCXXCompilerFlag)
    CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
    CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
    if(COMPILER_SUPPORTS_CXX11)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    elseif(COMPILER_SUPPORTS_CXX0X)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
    else()
        message("The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. You may not benefit from performance optimizations.")
    endif()

    #setup for GNU CXX compiler
    if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        message("found GNU compiler ...")
        if(CMAKE_BUILD_TYPE MATCHES Release)
            message("setup for release build ...")
            add_definitions(-D_FORTIFY_SOURCE=3)
        else()
            message("setup for debug build ...")
            add_compile_options(-O0 -Wall -Wextra -pedantic)
        endif()
    endif()
endif()
include(GNUInstallDirs)
